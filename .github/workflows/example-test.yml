name: Example App Test

on:
  # Run manually when desired
  workflow_dispatch:
  
  # Run automatically when CI and Native Build workflow completes successfully
  workflow_run:
    workflows: ["CI and Native Build"]
    types:
      - completed
    branches: [main, '**']
    
  # Run on pull requests that modify key native code files
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'android/**'
      - 'ios/**'
      - 'cpp/**'
      - 'src/**'
      - '*.podspec'
      - 'scripts/**'
      - 'example/**'

# Only run this workflow when the previous ones were successful or on specific PR events
jobs:
  check-previous-workflows:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Success
        run: echo "Ready to proceed with example app tests."
    
  ios-example-test:
    name: iOS Integration Test
    needs: check-previous-workflows
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
        uses: actions/checkout@v4
        with:
          submodules: false
          # For PRs, make sure we get the PR code
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
      
      - name: Download Complete Artifact
        if: ${{ github.event_name == 'workflow_run' }}
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: 'CI and Native Build'
          run_id: ${{ github.event.workflow_run.id }}
          name: llamacpp-rn-complete
          path: .
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      
      - name: Install Main Package Dependencies
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
        run: npm ci
      
      - name: Setup llama.cpp
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
        run: |
          chmod +x scripts/llama_cpp_version.sh
          scripts/llama_cpp_version.sh init
      
      - name: Verify iOS Framework
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
        run: |
          if [ ! -d "ios/libs/llamacpp.xcframework" ]; then
            echo "iOS framework not found, downloading..."
            chmod +x scripts/download_prebuilt.sh
            scripts/download_prebuilt.sh ios
          fi
          
          # Verify the XCFramework is available
          if [ -d "ios/libs/llamacpp.xcframework" ]; then
            echo "✅ XCFramework available for integration"
          else
            echo "❌ XCFramework not found at ios/libs/llamacpp.xcframework"
            exit 1
          fi
      
      - name: Build TypeScript Files
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
        run: npm run prepare
      
      - name: Setup Expo and Prebuild iOS Example
        working-directory: ./example
        run: |
          # Install dependencies for the example app
          npm install
          
          # Generate the iOS project with Expo
          npx expo prebuild --platform ios --clean
          
          # Verify iOS directory was created
          if [ -d "ios" ]; then
            echo "✅ iOS directory generated by Expo"
          else
            echo "❌ Failed to generate iOS directory"
            exit 1
          fi
      
      - name: Install Cocoapods and Link Library
        working-directory: ./example/ios
        run: |
          gem install cocoapods
          
          # Install pods to link the native modules
          pod install
          
          # Verify integration was successful
          if [ -d "Pods/LlamaCppRn" ]; then
            echo "✅ LlamaCppRn pod installed successfully"
          else
            echo "❌ LlamaCppRn pod installation failed"
            exit 1
          fi
      
      - name: Update PR Status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const context = github.context;
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'iOS Example App Integration',
              head_sha: context.payload.pull_request.head.sha,
              status: 'completed',
              conclusion: 'success',
              output: {
                title: 'iOS Integration Test Passed',
                summary: 'The iOS example app successfully integrated with the library.'
              }
            });

  android-example-test:
    name: Android Integration Test
    needs: check-previous-workflows
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
        uses: actions/checkout@v4
        with:
          submodules: false
          # For PRs, make sure we get the PR code
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
      
      - name: Download Complete Artifact
        if: ${{ github.event_name == 'workflow_run' }}
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: 'CI and Native Build'
          run_id: ${{ github.event.workflow_run.id }}
          name: llamacpp-rn-complete
          path: .
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
      
      - name: Install Android NDK
        run: |
          sdkmanager --install "ndk;23.1.7779620"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/23.1.7779620" >> $GITHUB_ENV
      
      - name: Install Main Package Dependencies
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
        run: npm ci
      
      - name: Setup llama.cpp Repository
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
        run: |
          chmod +x scripts/llama_cpp_version.sh
          scripts/llama_cpp_version.sh init
          
          # Verify the repository is available
          if [ -d "cpp/llama.cpp" ]; then
            echo "✅ llama.cpp repository available for integration"
          else
            echo "❌ llama.cpp repository not found"
            exit 1
          fi
      
      - name: Build TypeScript Files
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
        run: npm run prepare
      
      - name: Setup Expo and Prebuild Android Example
        working-directory: ./example
        run: |
          # Install dependencies for the example app
          npm install
          
          # Generate the Android project with Expo
          npx expo prebuild --platform android --clean
          
          # Verify Android directory was created
          if [ -d "android" ]; then
            echo "✅ Android directory generated by Expo"
          else
            echo "❌ Failed to generate Android directory"
            exit 1
          fi
      
      - name: Verify Android Integration
        working-directory: ./example/android
        run: |
          # Just run the initial Gradle tasks to verify module is properly linked
          ./gradlew :app:compileDebugJavaWithJavac --console=plain
          
          # Check if build files were generated for our module
          if grep -q "novastera.llamacpprn" app/build/intermediates/javac/debug/classes/com/novastera/llamacpprn || grep -q "novastera.llamacpprn" app/build/generated; then
            echo "✅ Android module integration verified"
          else
            echo "❌ Module integration verification failed"
            exit 1
          fi
      
      - name: Update PR Status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const context = github.context;
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Android Example App Integration',
              head_sha: context.payload.pull_request.head.sha,
              status: 'completed',
              conclusion: 'success',
              output: {
                title: 'Android Integration Test Passed',
                summary: 'The Android example app successfully integrated with the library.'
              }
            });
  
  # Final job that depends on both platforms passing
  integration-success:
    name: Example App Integration
    if: always()
    needs: [ios-example-test, android-example-test]
    runs-on: ubuntu-latest
    steps:
      - name: Check Status
        id: check
        run: |
          if [ "${{ needs.ios-example-test.result }}" = "success" ] && [ "${{ needs.android-example-test.result }}" = "success" ]; then
            echo "Both iOS and Android integration tests passed!"
            exit 0
          else
            echo "One or more integration tests failed!"
            exit 1
          fi 