name: CI and Native Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  setup-and-ci:
    name: Setup and CI Checks
    runs-on: ubuntu-latest
    outputs:
      status: ${{ job.status }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: false  # We'll handle llama.cpp setup with our scripts
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      
      - name: Install Dependencies
        run: npm ci
        # This automatically sets up llama.cpp through the postinstall script
      
      - name: TypeScript Check
        run: npm run typescript
      
      - name: Lint
        run: npm run lint
      
      - name: Build
        run: npm run prepare
      
      - name: Run Tests
        run: npm test
      
      # Upload the whole repository in its current state for other jobs to use
      - name: Upload Repository State
        uses: actions/upload-artifact@v4
        with:
          name: repo-state
          path: .
          retention-days: 1
  
  android-build:
    name: Android Native Build
    needs: setup-and-ci
    runs-on: ubuntu-latest
    steps:
      - name: Download Repository
        uses: actions/download-artifact@v4
        with:
          name: repo-state
          path: .
      
      - name: Restore file permissions
        run: |
          chmod +x scripts/*.sh
          find android -name "*.sh" -exec chmod +x {} \; || true
          find android -name "gradlew" -exec chmod +x {} \; || true
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          sdk-version: 35
          build-tools-version: 35.0.0
          ndk-version: 27.2.12479018
          cmake-version: 3.22.1

      - name: Create prebuilt directory
        run: mkdir -p prebuilt

      - name: Install Android NDK and Dependencies
        run: |
          # Then use our dedicated script for external dependency setup
          scripts/build_android_external.sh
          
      - name: Build Android Libraries with GPU support
        run: |
          # Execute the build script with GPU support
          echo "Building Android libraries with OpenCL and Vulkan support..."
          scripts/build_android.sh --abi=all
          
          # Verify libraries were built successfully
          if [ ! -f "android/src/main/jniLibs/arm64-v8a/libllama.so" ]; then
            echo "❌ Failed to build arm64-v8a library"
            exit 1
          else
            echo "✅ Successfully built arm64-v8a library"
            # Verify library is not empty
            if [ ! -s "android/src/main/jniLibs/arm64-v8a/libllama.so" ]; then
              echo "⚠️ arm64-v8a library is empty"
              exit 1
            fi
          fi
          
          if [ ! -f "android/src/main/jniLibs/x86_64/libllama.so" ]; then
            echo "❌ Failed to build x86_64 library"
            exit 1
          else
            echo "✅ Successfully built x86_64 library"
            # Verify library is not empty
            if [ ! -s "android/src/main/jniLibs/x86_64/libllama.so" ]; then
              echo "⚠️ x86_64 library is empty"
              exit 1
            fi
          fi
      
      - name: Verify GPU Backends in built library
        run: |
          # Check for OpenCL and Vulkan symbols in the built library
          echo "Checking for GPU backend symbols in the built library..."
          
          # Check for OpenCL symbols in ARM64 library
          echo "Checking arm64-v8a library:"
          if nm -D android/src/main/jniLibs/arm64-v8a/libllama.so | grep -i "opencl"; then
            echo "✅ OpenCL symbols found in arm64-v8a library"
          else
            echo "⚠️ No OpenCL symbols found in arm64-v8a library"
          fi
          
          # Check for Vulkan symbols in ARM64 library - need to check both "vulkan" and "vk_" prefixes
          if nm -D android/src/main/jniLibs/arm64-v8a/libllama.so | grep -i -E "vulkan|vk_|ggml.*vulkan"; then
            echo "✅ Vulkan symbols found in arm64-v8a library"
          else
            echo "⚠️ No Vulkan symbols found in arm64-v8a library"
            echo "Checking for Vulkan compiler flags in the binary..."
            
            # Check if Vulkan defines are in the binary
            if strings android/src/main/jniLibs/arm64-v8a/libllama.so | grep -i -E "GGML_VULKAN|VK_USE_PLATFORM"; then
              echo "✅ Vulkan compilation flags found in arm64-v8a binary"
            else
              echo "❌ No Vulkan compilation flags found in arm64-v8a binary"
            fi
          fi
          
          # Check for OpenCL symbols in x86_64 library
          echo "Checking x86_64 library:"
          if nm -D android/src/main/jniLibs/x86_64/libllama.so | grep -i "opencl"; then
            echo "✅ OpenCL symbols found in x86_64 library"
          else
            echo "⚠️ No OpenCL symbols found in x86_64 library"
          fi
          
          # Check for Vulkan symbols in x86_64 library - need to check both "vulkan" and "vk_" prefixes
          if nm -D android/src/main/jniLibs/x86_64/libllama.so | grep -i -E "vulkan|vk_|ggml.*vulkan"; then
            echo "✅ Vulkan symbols found in x86_64 library"
          else
            echo "⚠️ No Vulkan symbols found in x86_64 library"
            echo "Checking for Vulkan compiler flags in the binary..."
            
            # Check if Vulkan defines are in the binary
            if strings android/src/main/jniLibs/x86_64/libllama.so | grep -i -E "GGML_VULKAN|VK_USE_PLATFORM"; then
              echo "✅ Vulkan compilation flags found in x86_64 binary"
            else
              echo "❌ No Vulkan compilation flags found in x86_64 binary"
            fi
          fi
      
      - name: Upload Android Library Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-libraries
          path: android/src/main/jniLibs/
          retention-days: 1
          
      - name: Validate Android Library Structure
        run: |
          # Check if basic structure exists
          if [ ! -d "cpp/llama.cpp" ]; then
            echo "❌ llama.cpp repository not found"
            exit 1
          fi
          
          if [ ! -d "android/src/main/cpp/include" ]; then
            echo "❌ Android include directory not found"
            exit 1
          fi
          
          if [ ! -f "android/build.gradle" ]; then
            echo "❌ Android build.gradle not found"
            exit 1
          fi
          
          if [ ! -f "android/src/main/cpp/include/llama.h" ]; then
            echo "⚠️ llama.h not found in Android include directory. This may cause build issues."
          fi
          
          echo "✅ Android library structure validated for CI"
  
  ios-build:
    name: iOS Native Build
    needs: setup-and-ci
    runs-on: macos-latest
    steps:
      - name: Download Repository
        uses: actions/download-artifact@v4
        with:
          name: repo-state
          path: .
      
      - name: Restore file permissions
        run: |
          chmod +x scripts/*.sh
      
      - name: Setup iOS Framework
        run: |
          # Create necessary directories
          mkdir -p ios/libs
          
          # Use the new build_apple_external.sh script
          scripts/build_apple_external.sh init
          
          # Verify the iOS xcframework was set up correctly
          if [ ! -d "ios/libs/llama.xcframework" ]; then
            echo "❌ iOS framework not found at ios/libs/llama.xcframework"
            exit 1
          else
            echo "✅ iOS framework downloaded successfully"
            
            # List available slices
            echo "Available iOS framework slices:"
            ls -la ios/libs/llama.xcframework/
          fi
      
      - name: Upload iOS Framework Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-framework
          path: ios/libs/llama.xcframework/
          retention-days: 1
      
      - name: Validate iOS Podspec
        run: |
          # Check if the podspec exists
          if [ ! -f "LlamaCppRn.podspec" ]; then
            echo "❌ LlamaCppRn.podspec not found"
            exit 1
          fi
          
          # Just check the podspec content without running validation
          if grep -q "s.vendored_frameworks" LlamaCppRn.podspec && 
             grep -q "install_modules_dependencies" LlamaCppRn.podspec; then
            echo "✅ Podspec contains required sections including Turbo Module dependencies"
          else
            echo "❌ Podspec is missing required sections"
            exit 1
          fi
          
          echo "✅ iOS library setup validated"
  
  # Create final artifact for subsequent workflows
  create-workflow-artifact:
    name: Create Workflow Artifact
    if: ${{ success() }}
    needs: [setup-and-ci, android-build, ios-build]
    runs-on: ubuntu-latest
    steps:
      - name: Download Repository
        uses: actions/download-artifact@v4
        with:
          name: repo-state
          path: .
          
      - name: Download Android Libraries
        uses: actions/download-artifact@v4
        with:
          name: android-libraries
          path: android/src/main/jniLibs/
          
      - name: Download iOS Framework
        uses: actions/download-artifact@v4
        with:
          name: ios-framework
          path: ios/libs/llama.xcframework/
      
      - name: Restore file permissions
        run: |
          chmod +x scripts/*.sh
          find android -name "*.sh" -exec chmod +x {} \; || true
          find android -name "gradlew" -exec chmod +x {} \; || true
      
      # Upload a single combined artifact with everything needed for the next workflows
      - name: Upload Complete Artifact
        uses: actions/upload-artifact@v4
        with:
          name: llamacpp-rn-complete
          path: |
            cpp/
            ios/
            android/
            lib/
            node_modules/
            LlamaCppRn.podspec
            package.json
            tsconfig.json
            tsconfig.build.json
            scripts/
  
  build-success:
    name: CI and Native Build Success
    needs: [setup-and-ci, android-build, ios-build, create-workflow-artifact]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Check Status
        run: |
          if [ "${{ needs.setup-and-ci.result }}" = "success" ] && [ "${{ needs.android-build.result }}" = "success" ] && [ "${{ needs.ios-build.result }}" = "success" ] && [ "${{ needs.create-workflow-artifact.result }}" = "success" ]; then
            echo "All CI and Native Build steps passed!"
            exit 0
          else
            echo "One or more steps failed!"
            exit 1
          fi 
