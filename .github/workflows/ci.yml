name: CI and Native Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  setup-and-ci:
    name: Setup and CI Checks
    runs-on: ubuntu-latest
    outputs:
      status: ${{ job.status }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: false  # We'll handle llama.cpp setup with our scripts
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      
      - name: Install Dependencies
        run: npm ci
        # This automatically sets up llama.cpp through the postinstall script
      
      - name: TypeScript Check
        run: npm run typescript
      
      - name: Lint
        run: npm run lint
      
      - name: Build
        run: npm run prepare
      
      - name: Run Tests
        run: npm test
      
      # Upload the whole repository in its current state for other jobs to use
      - name: Upload Repository State
        uses: actions/upload-artifact@v4
        with:
          name: repo-state
          path: .
          retention-days: 1
  
  android-build:
    name: Android Native Build
    needs: setup-and-ci
    runs-on: ubuntu-latest
    steps:
      - name: Download Repository
        uses: actions/download-artifact@v4
        with:
          name: repo-state
          path: .
      
      - name: Restore file permissions
        run: |
          chmod +x scripts/*.sh
          find android -name "*.sh" -exec chmod +x {} \; || true
          find android -name "gradlew" -exec chmod +x {} \; || true
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          packages: 'platforms;android-35 build-tools;35.0.0 ndk;27.2.12479018 cmake;3.22.1'
          accept-android-sdk-licenses: true
      
      - name: Build GPU Libraries
        run: |
          # Check if llama.cpp directory already exists
          if [ -d "cpp/llama.cpp" ] && [ -f "cpp/llama.cpp/include/llama.h" ]; then
            echo "✅ llama.cpp directory already exists, skipping initialization"
          else
            # Initialize the llama.cpp repository
            scripts/setupLlamaCpp.sh init --platform=android
          fi
          
          # Get Android NDK path
          NDK_PATH=$ANDROID_HOME/ndk/27.2.12479018
          
          # Install Vulkan development packages as per llama.cpp docs
          echo "Installing Vulkan development packages..."
          sudo apt-get update
          sudo apt-get install -y libvulkan-dev vulkan-tools libvulkan1 mesa-vulkan-drivers
          
          # Check if Vulkan is available
          vulkaninfo --summary || echo "Vulkan info not available, but we'll continue"
          
          # Fix the libc++ library issue
          echo "Fixing libc++ library issues..."
          sudo apt-get install -y libc++1 libc++abi1
          
          # Check system libraries
          echo "Checking system libc++ libraries..."
          ls -la /usr/lib/x86_64-linux-gnu/libc++* || echo "No libc++ libraries found in /usr/lib"
          
          # Copy libc++ library from NDK to system path
          echo "Copying libc++ from NDK to system library path..."
          if [ -f "$NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/lib64/libc++.so" ]; then
            sudo cp "$NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/lib64/libc++.so" /usr/lib/x86_64-linux-gnu/
            sudo cp "$NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/lib64/libc++.so" /lib/x86_64-linux-gnu/ || true
            sudo ldconfig
            echo "✅ Copied libc++ from NDK to system paths"
          else 
            echo "❌ Could not find libc++ in NDK"
            find "$NDK_PATH" -name "libc++.so" | sort
          fi
          
          # Set up environment for glslc to find appropriate libraries
          export LD_LIBRARY_PATH="$NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/lib64:$LD_LIBRARY_PATH"
          
          # Set up environment for the build process
          export VULKAN_SDK=/usr
          echo "Using system Vulkan SDK at $VULKAN_SDK"
          
          # First build the GPU backend libraries (without the --glslc-path parameter which is not supported)
          echo "Building Android GPU backend libraries..."
          scripts/build_android_gpu_backend.sh --abi=all --ndk-path="$NDK_PATH"
          
          # Verify GPU libraries were built in prebuilt directory
          if [ -d "prebuilt/gpu/arm64-v8a" ] && [ "$(ls -A prebuilt/gpu/arm64-v8a/ 2>/dev/null)" ]; then
            echo "✅ Successfully built GPU libraries for arm64-v8a"
            ls -la prebuilt/gpu/arm64-v8a/
          else
            echo "❌ No GPU libraries found for arm64-v8a, build failed"
            exit 1
          fi

      - name: Initialize llama.cpp for Android
        run: |
          mkdir -p prebuilt
          echo "Initializing llama.cpp for Android platform only..."
          
          # Check if llama.cpp repository is already initialized at the correct version
          if [ -d "cpp/llama.cpp" ] && [ -f "cpp/llama.cpp/include/llama.h" ]; then
            echo "✅ llama.cpp directory already exists, using existing repository"
          else
            # Only initialize if not already done
            scripts/setupLlamaCpp.sh init --platform=android
          fi
      
      - name: Build Final Android Libraries
        run: |
          # Get Android NDK path (same as above)
          NDK_PATH=$ANDROID_HOME/ndk/27.2.12479018
          
          # Get glslc path
          GLSLC_PATH="$ANDROID_HOME/ndk/27.2.12479018/shader-tools/linux-x86_64/glslc"
          
          # Ensure the libc++ library is properly set up for this step as well
          if [ -f "$NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/lib64/libc++.so" ]; then
            echo "Using NDK's libc++ library..."
            export LD_LIBRARY_PATH="$NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/lib64:$LD_LIBRARY_PATH"
          fi
          
          # Set up environment for the build process
          export VULKAN_SDK=/usr
          export VULKAN_INCLUDE_DIR=/usr/include
          echo "Using system Vulkan SDK at $VULKAN_SDK"
          
          # Build the final Android libraries with GPU support - note that we use --glslc-path here
          # which is supported by build_android_external.sh but not by build_android_gpu_backend.sh
          echo "Building Android libraries with full GPU support..."
          scripts/build_android_external.sh --abi=all --ndk-path="$NDK_PATH" --glslc-path="$GLSLC_PATH" --platform=android
          
          # The build_android_external.sh script handles:
          # - Building the libraries for each ABI
          # - Copying OpenCL libraries if available
          # - Creating appropriate flag files for GPU support
          # - Verifying architecture and capabilities
      
      - name: Verify Library Architecture and Symbols
        run: |
          # Just some basic sanity checks to make sure the build didn't silently fail
          if [ ! -f "android/src/main/jniLibs/arm64-v8a/libllama.so" ] || 
             [ ! -f "android/src/main/jniLibs/x86_64/libllama.so" ]; then
            echo "❌ Libraries are missing"
            exit 1
          fi
          
          # Check file sizes to make sure they're not empty
          arm64_size=$(stat -c%s "android/src/main/jniLibs/arm64-v8a/libllama.so" 2>/dev/null || 
                      stat -f%z "android/src/main/jniLibs/arm64-v8a/libllama.so")
          x86_64_size=$(stat -c%s "android/src/main/jniLibs/x86_64/libllama.so" 2>/dev/null || 
                       stat -f%z "android/src/main/jniLibs/x86_64/libllama.so")
          
          if [ "$arm64_size" -lt 1000000 ] || [ "$x86_64_size" -lt 1000000 ]; then
            echo "❌ Libraries are too small, build likely failed"
            exit 1
          fi
          
          echo "✅ Library validation passed"

      - name: Upload Android Native Libs
        uses: actions/upload-artifact@v4
        with:
          name: android-native-libs
          path: android/src/main/jniLibs/
  
  ios-build:
    name: iOS Native Build
    needs: setup-and-ci
    runs-on: macos-latest
    steps:
      - name: Download Repository
        uses: actions/download-artifact@v4
        with:
          name: repo-state
          path: .
      
      - name: Restore file permissions
        run: |
          chmod +x scripts/*.sh
      
      - name: Setup iOS Framework
        run: |
          # Check if llama.cpp directory already exists
          if [ -d "cpp/llama.cpp" ] && [ -f "cpp/llama.cpp/include/llama.h" ]; then
            echo "✅ llama.cpp directory already exists, skipping initialization"
          else
            # Initialize the llama.cpp repository if needed
            scripts/setupLlamaCpp.sh init
          fi
          
          # Use the build_apple_external.sh to set up iOS framework
          scripts/build_apple_external.sh init
          
          # Verify the iOS xcframework was set up correctly
          if [ ! -d "ios/libs/llama.xcframework" ]; then
            echo "❌ iOS framework build failed!"
            exit 1
          else
            echo "✅ iOS framework downloaded successfully"
            
            # List available slices
            echo "Available iOS framework slices:"
            ls -la ios/libs/llama.xcframework/
          fi
          
      - name: Upload iOS Framework
        uses: actions/upload-artifact@v4
        with:
          name: ios-framework
          path: ios/libs/llama.xcframework/
          
      - name: Validate iOS Podspec
        run: |
          # Check if the podspec exists
          if [ ! -f "LlamaCppRn.podspec" ]; then
            echo "❌ LlamaCppRn.podspec not found"
            exit 1
          fi
          
          # Just check the podspec content without running validation
          if grep -q "s.vendored_frameworks" LlamaCppRn.podspec && 
             grep -q "install_modules_dependencies" LlamaCppRn.podspec; then
            echo "✅ Podspec contains required sections including Turbo Module dependencies"
          else
            echo "❌ Podspec is missing required sections"
            exit 1
          fi
          
          echo "✅ iOS library setup validated"
  
  # Create final artifact for subsequent workflows
  create-workflow-artifact:
    name: Create Workflow Artifact
    if: ${{ success() }}
    needs: [setup-and-ci, android-build, ios-build]
    runs-on: ubuntu-latest
    steps:
      - name: Download Repository
        uses: actions/download-artifact@v4
        with:
          name: repo-state
          path: .
          
      - name: Download Android Libraries
        uses: actions/download-artifact@v4
        with:
          name: android-native-libs
          path: android/src/main/jniLibs/
          
      - name: Download iOS Framework
        uses: actions/download-artifact@v4
        with:
          name: ios-framework
          path: ios/libs/llama.xcframework/
      
      - name: Restore file permissions
        run: |
          chmod +x scripts/*.sh
          find android -name "*.sh" -exec chmod +x {} \; || true
          find android -name "gradlew" -exec chmod +x {} \; || true
      
      # Upload a single combined artifact with everything needed for the next workflows
      - name: Upload Complete Artifact
        uses: actions/upload-artifact@v4
        with:
          name: llamacpp-rn-complete
          path: |
            cpp/
            ios/
            android/
            lib/
            node_modules/
            LlamaCppRn.podspec
            package.json
            tsconfig.json
            tsconfig.build.json
            scripts/
  
  build-success:
    name: CI and Native Build Success
    needs: [setup-and-ci, android-build, ios-build, create-workflow-artifact]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Check Status
        run: |
          if [ "${{ needs.setup-and-ci.result }}" = "success" ] && [ "${{ needs.android-build.result }}" = "success" ] && [ "${{ needs.ios-build.result }}" = "success" ] && [ "${{ needs.create-workflow-artifact.result }}" = "success" ]; then
            echo "All CI and Native Build steps passed!"
            exit 0
          else
            echo "One or more steps failed!"
            exit 1
          fi 
